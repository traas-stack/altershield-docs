<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://traas-stack.github.io/zh-CN/blog</id>
    <title>AlterShield Blog</title>
    <updated>2023-07-17T05:47:48.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://traas-stack.github.io/zh-CN/blog"/>
    <subtitle>AlterShield Blog</subtitle>
    <icon>https://traas-stack.github.io/zh-CN/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[「0710」AlterShield线上MeetUp]]></title>
        <id>https://traas-stack.github.io/zh-CN/blog/meetup-0710</id>
        <link href="https://traas-stack.github.io/zh-CN/blog/meetup-0710"/>
        <updated>2023-07-17T05:47:48.000Z</updated>
        <summary type="html"><![CDATA[在第一次[线下MeetUp]举行之后，发现大家对于变更管控技术的兴趣还是比较浓厚的。同时有几个公司的小伙伴找到我们，希望再组织一次这样的交流。]]></summary>
        <content type="html"><![CDATA[<p>在第一次<a href="https://altershield.io/zh-CN/blog/meetup-0618/" target="_blank" rel="noopener noreferrer">线下MeetUp</a>举行之后，发现大家对于变更管控技术的兴趣还是比较浓厚的。同时有几个公司的小伙伴找到我们，希望再组织一次这样的交流。
于是我们在<strong>7月10日 14:00-16:00</strong>通过线上腾讯会议的方式再一次组织起从事SRE相关工作的一些同学参与到一起来讨论。在整个交流过程中，大家问到的一些
问题都是曾经变更管控在蚂蚁集团落地变更管控遇到的一些困难和问题，在这里整理分享给大家。</p><blockquote><p>本次腾讯会议参加的同学主要有来自蚂蚁集团、美团、OPPO、作业帮的同学
会议峰值人数达到30人
<img loading="lazy" alt="img.png" src="/zh-CN/assets/images/1-efdc8b9b99abea885f8252dc01b6e106.png" width="3528" height="2232" class="img_ev3q"></p></blockquote><p><strong>本次线上MeetUp进程主要如下：</strong></p><p>1、王月凡同学分享了关于变更防控三个主要的点：</p><ul><li>变更防控的价值</li><li>变更防控的方法和架构</li><li>变更防控的实践</li></ul><p>在分享完之后大家展开了比较激烈的讨论，线上提问超<strong>30个</strong>，这里整理一些比较有代表性的问题同大家分享交流。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1变更防控的价值">1、变更防控的价值<a href="#1变更防控的价值" class="hash-link" aria-label="1、变更防控的价值的直接链接" title="1、变更防控的价值的直接链接">​</a></h2><p><img loading="lazy" alt="img.png" src="/zh-CN/assets/images/2-8b24a870e6a5a66cb7e00ff2863b3185.png" width="1027" height="590" class="img_ev3q"></p><p>当前互联网、科技技术公司面临的变更风险挑战：</p><ol><li>相互交错的组织协同模式</li><li>错综复杂的分布式微服务链路</li><li>对于稳定性问题的容忍度</li></ol><p>如何应对公司错综复杂的变更操作，做好变更防控，降低变更引入的稳定性风险，主要聚焦变更技术架构、标准与规范、以及智能化技术的应用，通过技术的手段保障变更效率的同时，降低变更风险。
如何从公司视角，保持大家的步调一致，从而避免不必要的风险。这些问题都是典型的行业难题，这也是变更管控的价值所在。</p><p>更多信息获取见：<a href="https://altershield.io/zh-CN/blog/welcome-altershield-v0.1/" target="_blank" rel="noopener noreferrer">AlterShield v0.1正式开源</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2变更防控方法与架构">2、变更防控方法与架构<a href="#2变更防控方法与架构" class="hash-link" aria-label="2、变更防控方法与架构的直接链接" title="2、变更防控方法与架构的直接链接">​</a></h2><p>要把变更防控起来，最重要的第一件事就是先定义清楚什么是变更，我们对变更的广泛定义是：<strong><em>"企业内部人员触发的任何导致IT服务状态发生变化的行为"</em></strong></p><p>同时我们定义了一套标准的开放式变更管控协议<strong><a href="https://altershield.io/zh-CN/docs/open-change-management-specification/overview" target="_blank" rel="noopener noreferrer">OCMS</a></strong>，该协议已经在蚂蚁集团内部接入了上千种变更场景，并且有效拦截了数百次可能引发故障的变更风险。</p><p>但是接入变更管控并不意味着能够完全消除变更带来的风险，而是有更多技术性手段可以降低风险。
<img loading="lazy" alt="img.png" src="/zh-CN/assets/images/3-44b0bae9cc8e3362d26eadf33aafffab.png" width="959" height="420" class="img_ev3q"></p><p>我们提出了<strong>变更的三板斧</strong>：可灰度（避免一次性梭哈变更）、可观测（变更过程中有可观测的指标、监控...）、可应急（变更出现问题有快速回滚的能力）</p><p>通过对变更灰度分批次执行与管控，每个批次的执行都需要回答以下三个问题：</p><ol><li>能不能做？ </li><li>做没做完？ </li><li>做没做对？ </li></ol><p>总的来说，通过对变更的灰度、分批次执行，并在每一个批次都进行前后置的风险校验，理论上来说一次变更的风险是逐渐被收敛的，一次变更的风险变化趋势图如下：</p><p><img loading="lazy" alt="img.png" src="/zh-CN/assets/images/4-09b338fc90af5c4bd542299518bdb98d.png" width="819" height="443" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3变更防控智能化实践">3、变更防控智能化实践<a href="#3变更防控智能化实践" class="hash-link" aria-label="3、变更防控智能化实践的直接链接" title="3、变更防控智能化实践的直接链接">​</a></h2><p>随着业务的快速发展，各种业务系统都在走向平台化，运维方式在经历人肉运维，脚本自动化运维后最终演变成<strong>DevOps</strong>。但随着大数据及人工智能的快速发展，传统的运维方式及解决方案已不能满足需求。
基于如何提升平台效率和稳定性及降低资源，关于蚂蚁集团内部一些<strong>AIOps</strong>的实践及实现分享给大家。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="case-1指标的实时时序异常检测">case 1：指标的实时时序异常检测<a href="#case-1指标的实时时序异常检测" class="hash-link" aria-label="case 1：指标的实时时序异常检测的直接链接" title="case 1：指标的实时时序异常检测的直接链接">​</a></h3><p><img loading="lazy" alt="img.png" src="/zh-CN/assets/images/5-cf2f317de4f5b25aad2f1639a91726d3.png" width="1003" height="587" class="img_ev3q"></p><p>这里实现的思路主要是结合监控平台对不同分组的机器的各种指标的时序序列使用一些智能化算法进行异常检测。 这里对一次变更的机器定义了如下组别：</p><ul><li>变更组：一个应用正在变更批次机器的时序</li><li>历史组：该应用的同一个变更动作的同一个指标的历史时序</li><li>背景组：该应用变更批次机器较长时间窗口内的时序</li><li>对照组：该应用尚未发生变更批次机器的同时刻的时序</li><li>日志组：该应用正在变更批次机器的 common error 日志信息</li></ul><p>实践发现，如果不进行降噪，通常会有较大的噪声导致拦截率较高，影响业务。因此降噪也是很重要的一部分，主要的降噪维度有：</p><ul><li>时间角度</li><li>变更对象</li><li>变更范围</li><li>历史相似度</li></ul><p>相关算法技术：</p><ul><li>DTW（ Dynamic Time Warping ，动态时间规划)</li><li>3-Sigma</li><li>KDE(Kernel Density Estimation，核密度函数估计) </li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="case2日志堆栈新增突增异常检测">case2：日志堆栈新增/突增异常检测<a href="#case2日志堆栈新增突增异常检测" class="hash-link" aria-label="case2：日志堆栈新增/突增异常检测的直接链接" title="case2：日志堆栈新增/突增异常检测的直接链接">​</a></h3><p><img loading="lazy" alt="img.png" src="/zh-CN/assets/images/7-45f094d16a9613f6cb7fdb8e241c6479.png" width="417" height="384" class="img_ev3q"></p><p>异常检测维度:</p><ul><li>新增异常日志类型： 对比变更前后，系统堆栈日志是否有出现过新的日志模板类型</li><li>突增异常日志类型： 对比变更前后，系统堆栈日志是否有某个日志模板类型，日志量有较大的增长</li></ul><p><em>ps:关于更多智能化变更异常检测算法，近期将在<a href="https://altershield.io" target="_blank" rel="noopener noreferrer">AlterShield官网</a>进行开源</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="meetup问题讨论-整理">MeetUp问题讨论 整理<a href="#meetup问题讨论-整理" class="hash-link" aria-label="MeetUp问题讨论 整理的直接链接" title="MeetUp问题讨论 整理的直接链接">​</a></h2><p>这里整理了一些比较好的问题，关于大家更多的问题咨询见：<a href="https://altershield.yuque.com/org-wiki-altershield-gug9gu/lg0rts/clg87wxx0gbypfg4" target="_blank" rel="noopener noreferrer">MeetUp回放</a></p><p><strong>1、变更管控的效果和价值评价？</strong></p><p>主要是靠防御有效拦截率来证明，有效性主要通过看业务是否有真实的回滚，以及对业务是否有影响。</p><p><strong>2、变更前后置涉及到的交互会影响一大片变更平台，作为中心化系统的鲁棒性设计。</strong></p><p>SDK中要考虑这种容错性设计，首先对于管控系统的技术要求会较高，其次SDK中通过心跳机制实时的检测管控端是否出现问题，当出现问题时执行一些降级策略，确保变更平台不会因为管控平台的故障导致连带的故障。</p><p><strong>3、是否一定要按照<a href="https://altershield.io/zh-CN/docs/open-change-management-specification/overview" target="_blank" rel="noopener noreferrer">OCMS</a>协议，不同场景填写信息不太一样？</strong></p><p><a href="https://altershield.io/zh-CN/docs/open-change-management-specification/overview" target="_blank" rel="noopener noreferrer">OCMS</a>协议是我们基于蚂蚁集团内部五年落地变更管控的经验，总结提炼的一套普适性较强的变更信息模型，对于不同场景填写的信息是不完全一样的。这套协议是可以根据自己的业务场景进行调整修改的～</p><p><strong>4、接入变更管控就能完全避免变更的风险吗？</strong></p><p>能很大程度上降低变更所引入的风险，变更的执行和管控分离是一种降低变更风险的思路，通过灰度、分批校验等技术手段尽可能的暴露出一次变更的风险并收敛。
同时当真的出现变更引起的问题时，具备有效的手段快速的建设能力（防御规则）避免下次同类问题的再次出现。</p><p><strong>5、关于智能分析的一些疑问？</strong></p><p>变更智能分析是下沉到代码维度的分析，程序分析本身就是一个比较有技术深度的问题，在蚂蚁集团内部是有独立的团队研究，此部分内容后续将通过一些文章简单介绍～</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="加入我们">加入我们<a href="#加入我们" class="hash-link" aria-label="加入我们的直接链接" title="加入我们的直接链接">​</a></h2><p>开源项目官网：<a href="https://altershield.io" target="_blank" rel="noopener noreferrer">AlterShield官网</a>, <a href="https://github.com/traas-stack/altershield" target="_blank" rel="noopener noreferrer">Github仓库地址</a></p><p>欢迎大家加入AlterShield开源项目群参与讨论：</p><p><img loading="lazy" alt="img.png" src="/zh-CN/assets/images/8-189fc2ed1d3521fc7a98e7c2a76f8a51.png" width="986" height="1280" class="img_ev3q"></p>]]></content>
        <author>
            <name>Yuefan Wang</name>
            <uri>https://github.com/yvan-wyf</uri>
        </author>
        <author>
            <name>Yalong Jin</name>
            <uri>https://github.com/jinyalong</uri>
        </author>
        <author>
            <name>Haouan Yu</name>
            <uri>https://github.com/yhaoxuan</uri>
        </author>
        <category label="MeetUp" term="MeetUp"/>
        <category label="AlterShield" term="AlterShield"/>
        <category label="蚂蚁集团" term="蚂蚁集团"/>
        <category label="OPPO" term="OPPO"/>
        <category label="作业帮" term="作业帮"/>
        <category label="美团" term="美团"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[杭州首次线下MeetUp]]></title>
        <id>https://traas-stack.github.io/zh-CN/blog/meetup-0618</id>
        <link href="https://traas-stack.github.io/zh-CN/blog/meetup-0618"/>
        <updated>2023-06-26T12:38:49.000Z</updated>
        <summary type="html"><![CDATA[联通软件研究院，bilibili，蚂蚁集团的从事变更相关的同学在杭州首次线下的MeetUp，本次线下交流的都是在SRE领域有着丰富经验的同学，都在各自的公司参与了SRE关键工作和平台的建设，大家对于SRE如何做好变更的风险防控，以及中间可能会遇到的问题进行了讨论和交流，下面整理了一些讨论交流的内容，分享给大家。]]></summary>
        <content type="html"><![CDATA[<p>联通软件研究院，bilibili，蚂蚁集团的从事变更相关的同学在杭州首次线下的MeetUp，本次线下交流的都是在SRE领域有着丰富经验的同学，都在各自的公司参与了SRE关键工作和平台的建设，大家对于SRE如何做好变更的风险防控，以及中间可能会遇到的问题进行了讨论和交流，下面整理了一些讨论交流的内容，分享给大家。</p><blockquote><p>本次是AlterShield开源后的第一次线下交流MeetUp，刚好有几位小伙伴对变更管控有兴趣，同时也在杭州，故一拍即合组了一个线下关于变更管控的技术讨论交流。<br>
<!-- -->地点：杭州·市民中心附近星巴克<br>
<!-- -->时间：2023.06.18<br>
<!-- -->本次MeetUp参与人(照片左至右)：
<img loading="lazy" src="/zh-CN/assets/images/1-533826f82e75550013089319cc69a2b4.png" width="1416" height="1062" class="img_ev3q"></p><ul><li>吴天昊（联通软件研究院 副总架构师)</li><li>邵创创（联通软件研究院 变更管理负责人）</li><li>刘昊（Bilibili SRE体系&amp;平台工程负责人）</li><li>王月凡（蚂蚁集团 AiOps&amp;变更管控负责人）</li><li>袁帅（Bilibili 运维数据资产负责人）</li></ul></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-变更管控的重要性">1. 变更管控的重要性<a href="#1-变更管控的重要性" class="hash-link" aria-label="1. 变更管控的重要性的直接链接" title="1. 变更管控的重要性的直接链接">​</a></h2><p>线下交流的时候，大家都非常认可对于一个技术企业稳定性来说，变更管控是非常关键且重要的一件事情，在变更引发的故障上，都有相同的惨痛经历，同时变更又是一家技术公司往前演进的步伐，不能纯靠一些流程管控的手段，去加重变更的负担和周期，需要依靠一些技术手段，对变更风险进行有效的防控与处置，能够统一从SRE的角度，合理有效的去控制不同业务场景，可能引发的变更风险，同时对不同的业务场景，配置上通用的、定制化的防御防线，在变更期间去阻断变更引发的风险。</p><p>让<strong>变更做到三板斧：可灰度、可观测、可回滚</strong>，是能够防控变更风险的的关键思路，也是变更管控平台技术体系的基础支撑，<strong>让变更执行能够灰度分批的生效，同时系统自动盯盘，进行前后置校验，当算法识别到风险后，阻断变更的执行，有效防止风险扩大</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-关于如何快速进行变更管控的接入">2. 关于如何快速进行变更管控的接入？<a href="#2-关于如何快速进行变更管控的接入" class="hash-link" aria-label="2. 关于如何快速进行变更管控的接入？的直接链接" title="2. 关于如何快速进行变更管控的接入？的直接链接">​</a></h2><p>公司里面都有无数的变更执行平台，无论是负责服务器发布、运维的平台，还是底层网络、基础设施的变更平台，还是业务上的运营配置变更的平台，这些变更执行平台，都需要进行改造，接入到变更管控的标准体系内，但是在公司内部，这些变更平台负责人，本身是少有稳定性目标的，同时在故障真正发生之前，不太会重视变更可能会引发的稳定性风险，理所当然在变更管控接入改造配合度上，意愿度也不会特别强。</p><p>关于如何快速推进变更管控的接入，大致上有<strong>三个思路</strong>：</p><p><strong>1. 先从故障/风险较高的平台入手，以全站通用防控能力作为切入，如封网、窗口等，从而快速达到管控效果</strong>  </p><p><strong>2. 及时借力故障发生时，故障往往发生后，风险意识、整改动力是比较强的</strong> </p><p><strong>3. 不断的宣贯变更的风险及其重要性。</strong> </p><p>除上述方式外，还是得持续探索底层无须改造接入的变更防控方案，比如从流量网关层、SQL执行层等。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-如何衡量变更风险防控的效果">3. 如何衡量变更风险防控的效果<a href="#3-如何衡量变更风险防控的效果" class="hash-link" aria-label="3. 如何衡量变更风险防控的效果的直接链接" title="3. 如何衡量变更风险防控的效果的直接链接">​</a></h2><p>前期可以通过<strong>变更防御有效识别和拦截的风险数据</strong>，去衡量变更风险防控带来的效果，这个前提是需要提前做好变更影响面分析、变更防御能力，能够针对每一笔变更，分析出有效的影响面，包括不限于影响的上下游系统、业务链路等，以及应该观测的监控指标，同时在结合变更防御自动的算法异常检测，能够实时的在变更期间识别指标异动、日志异常，有效的阻断变更风险。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-系统自动防御盯盘-vs-人工盯盘">4. 系统自动防御盯盘 VS 人工盯盘<a href="#4-系统自动防御盯盘-vs-人工盯盘" class="hash-link" aria-label="4. 系统自动防御盯盘 VS 人工盯盘的直接链接" title="4. 系统自动防御盯盘 VS 人工盯盘的直接链接">​</a></h2><p>在变更执行期间去往往需要运维同学人工进行盯盘，观察监控、观察日志，而人工观察天然会存在遗漏，并且人的精力是无法同时观察成百上千个系统指标，更何况往微服务分布式方向演进，一个系统的变更，往往涉及到上下游众多链路，仅靠人工是无法去完整观测齐全的，同时人工的观测非常依赖历史经验积累，往往不同经验的人工进行盯盘，效果差异都会比较大。
依赖系统进行自动的防御盯盘，就如同自动驾驶技术的视觉感知系统一样，<strong>系统对于指标进行实时的算法异常检测，高效的同时对成百上千的系统指标、业务指标进行全自动的监控指标盯盘，快速有效的识别指标异动，同时在结合上变更管控的能力，能够有效的阻断、防控变更风险，防止变更风险逐步扩大</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-为什么一定要变更管控与变更执行平台分离">5. 为什么一定要变更管控与变更执行平台分离？<a href="#5-为什么一定要变更管控与变更执行平台分离" class="hash-link" aria-label="5. 为什么一定要变更管控与变更执行平台分离？的直接链接" title="5. 为什么一定要变更管控与变更执行平台分离？的直接链接">​</a></h2><p>更专业的人，做更专业的事情，往往变更执行平台，考虑的问题是如果设计变更流程，尽可能快速执行完成，尽快自动化，但变更对于稳定性的影响，这个是一个持续性的防控问题，不会在变更平台设计之初，就完全解决掉，而SRE往往是对稳定性最终负责的人，所以是很有必要将变更管控单独提炼出来，这部分的持续演进和设计理念，主要都是围绕如何让SRE更加灵活、高效的防控风险故障去设计的，所以对应变更管控平台的开放性要求会高一些。</p><p>最终在<strong>变更管控平台设计的思路上，会选择以切面的方式，将两部分平台职责划分开，让更专业的人，更专注的去做风险防控的事情，同时也便于做整个公司级统一的封网、窗口、规范性的管控和要求</strong>。 </p><p>如下图所示：
<img loading="lazy" src="/zh-CN/assets/images/2-425108a37cc1fd8b781cafcec2187265.png" width="1500" height="1103" class="img_ev3q"></p><p>本次交流了不少最近大家行业里面的趣事、八卦，还有对于整个SRE领域发展的看法和期待，整个过程非常的轻松自在，也非常期待后续有更多有想交流讨论的同学，再组一次分享与交流（不限聊技术~hahaha）</p><center>⭐️⭐️看这里⭐️⭐️欢迎微信扫码进交流群，期待与您的下一次MeetUp！</center><center>预约参加下一次MeetUp加微信：yvan_wyf</center><p><img loading="lazy" src="/zh-CN/assets/images/3-9ad0a48f215a2d5b25165b0be9590bc1.png" width="986" height="1280" class="img_ev3q"></p>]]></content>
        <author>
            <name>Yuefan Wang</name>
            <uri>https://github.com/yvan-wyf</uri>
        </author>
        <author>
            <name>Yalong Jin</name>
            <uri>https://github.com/jinyalong</uri>
        </author>
        <category label="MeetUp" term="MeetUp"/>
        <category label="AlterShield" term="AlterShield"/>
        <category label="蚂蚁集团" term="蚂蚁集团"/>
        <category label="Bilibili" term="Bilibili"/>
        <category label="联通软件研究院" term="联通软件研究院"/>
        <category label="SRE" term="SRE"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[蚂蚁集团变更管控平台 AlterShield 正式开源]]></title>
        <id>https://traas-stack.github.io/zh-CN/blog/welcome-altershield-v0.1</id>
        <link href="https://traas-stack.github.io/zh-CN/blog/welcome-altershield-v0.1"/>
        <updated>2023-06-09T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[AlterShield 的出现，旨在通过系统化的方式解决SRE领域变更引发的稳定性风险问题，变更管控领域相关的问题。]]></summary>
        <content type="html"><![CDATA[<p>AlterShield 的出现，旨在通过系统化的方式解决SRE领域变更引发的稳定性风险问题，变更管控领域相关的问题。</p><h1>AlterShield 简介</h1><p>AlterShield 的出现，旨在通过系统化的方式解决SRE领域变更引发的稳定性风险问题，变更管控领域相关的问题。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="什么是变更管控">什么是变更管控？<a href="#什么是变更管控" class="hash-link" aria-label="什么是变更管控？的直接链接" title="什么是变更管控？的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="变更问题的价值和意义">变更问题的价值和意义<a href="#变更问题的价值和意义" class="hash-link" aria-label="变更问题的价值和意义的直接链接" title="变更问题的价值和意义的直接链接">​</a></h3><p>对于生产环境的稳定性，是各个互联网行业相关公司都关注的。尤其是对于大型互联网公司来说，稳定性就显得更为重要。另外，从诱发稳定性问题的原因分析来说，变更及编码问题所占据的比例，常年超过一半以上。历史上因此产生的重大故障不胜枚举。</p><p><img loading="lazy" src="/zh-CN/assets/images/1-81885effe5a276b58c45f727dc908a87.png" width="850" height="344" class="img_ev3q"></p><p>同时，由于分布式所带来的系统复杂度、业务越来越复杂所带来组织间关系的复杂度。导致了像亚马逊、NetFlix、蚂蚁集团这类业务体系庞大的公司，变更的问题就更为严重。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="变更管控的思路">变更管控的思路<a href="#变更管控的思路" class="hash-link" aria-label="变更管控的思路的直接链接" title="变更管控的思路的直接链接">​</a></h3><p>虽然说业界有了上述的一个共识，但诱发线上问题的根因是多种多样的，比如编码引入的Bug、变更人员的疏忽、人员之间沟通不到位等等。同时，随着业务体量的不断增大，组织划分与团队协作关系也会日益复杂。这种关系是符合康威定律的，也就是说组织关系的复杂会引发沟通成本的加剧，也间接导致了变更问题难以管控。</p><p><img loading="lazy" src="/zh-CN/assets/images/2-f27b9e8892864fea162bbc39cba3abf6.png" width="845" height="267" class="img_ev3q"></p><p>所以，对于变更管控的思路，业界最基础也最容易实现的方案是做事件的感知 + 计划报备审批。但这种方式的弊端在于强依赖审批者的专家经验，且无法扩大变更管控的规模。</p><p>我们在蚂蚁集团实践的变更管控思路是：<strong>在整个变更的生命周期中（包括变更事前的计划报备、提前的变更风险及影响分析、变更中的异常观测、变更出现异常的熔断及自愈、变更完成后的变更度量及审计），以系统化的手段去防控和管理约束变更流程，使变更流程实现“三板斧”：可灰度、可观测、可应急</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="那么altershield-是什么">那么，AlterShield 是什么？<a href="#那么altershield-是什么" class="hash-link" aria-label="那么，AlterShield 是什么？的直接链接" title="那么，AlterShield 是什么？的直接链接">​</a></h2><p><strong>AlterShield 是作为变更管控领域中一款集变更感知、变更防御、变更分析于一身的一站式管控平台。旨在通过定义变更标准协议，规范变更管控流程，使得用户可以快速发现变更中的问题，并及时降低故障影响面。</strong></p><p>AlterShield 是蚂蚁集团内部研发了近 5 年的变更管控平台 OpsCloud 的开源版本。经过多年大型互联网公司内部复杂业务场景的驱动，OpsCloud 在变更管控领域沉淀了丰富经验，是蚂蚁集团内部全部类型变更的统一管控平台，也是业务研发、质量测试、SRE同学日常进行变更感知、变更分析、变更异常识别的重要入口，在蚂蚁集团的变更风险防控上取得了显著的效果。我们非常希望能将这些经验和业界进行共同探讨与共同演进，为此我们开源了 AlterShield，因为整套变更防控系统较复杂，我们会逐步将所有的功能共享到社区，也非常欢迎大家来和我们交流关于你当前遇到的关于这个领域遇到的问题。</p><h1>AlterShield 整体技术架构</h1><p><img loading="lazy" src="/zh-CN/assets/images/3-2d04d4dab1f8a709d644e46534e20fd4.png" width="1500" height="788" class="img_ev3q"></p><p>在技术架构上，AlterShield 分为以下几部分内容：</p><ol><li>产品功能层：面向研发、质量、SRE同学，提供变更信息感知及订阅、变更信息搜索、变更分析结果查看、变更计划执行流程、变更防御配置、变更防御异常检测结果感知的产品能力。</li><li>OCMS（Open Change Management Specification） SDK，我们想逐步构建一套标准的变更信息协议，未来在这个领域，大家都能够基于一套标准的协议，去进行各自的系统设计；目前的协议是基于蚂蚁集团的上千种变更场景总结归纳而来，非常初期的一个版本，这部分也欢迎大家来一起演进，协议包含两部分内容：
a. 变更信息协议：这个信息协议是上层变更平台与后续所有功能模块间进行变更信息交互的标准信息结构。
b. 变更技术协议：一种按代际区分不同变更生效流程的SDK，所有上游变更平台通过该方式对接 AlterShield 进行前后置切面的管控。</li><li>Analyser Framework（变更分析框架）：在OCMS SDK流程中，提供了变更前的影响面分析、风险分析、可观测性分析能力，会对变更内容、变更影响面、变更执行策略进行分析，同时基于这些分析结果，给出本次变更的风险分级，能够描述这个变更可能存在的危险程度。</li><li>Defender Framework（变更防御框架）：在OCMS SDK流程中，提供了变更中异常识别手段的路由、调度、并发执行、异步化控制能力，最终给出变更是否准入或可继续的判定。</li><li>Defender Service（变更防御服务）：AlterShield 在防御框架中集成的全局通用的防御能力。如：可观测性领域的异常检测、配置变更中配置值的自适应校验、变更窗口及封网的管控、定制模板的变更参数校验。</li><li>开放扩展：以Plugin、SPI的形式，集成不同领域对于变更分析、变更防御的不同诉求，并以配置化的形式进行路由、执行，能够更加灵活的满足不同变更场景、不同业务场景下的风险防控诉求。</li><li>事件调度：AlterShield 中各个模块间的交互方式都是通过内部事件来进行的，同时也负责各防御能力、分析能力的并发调度执行。</li></ol><p>上面介绍到的模块，我们都会陆续在Github仓库开源，也欢迎大家一起来参与，接下来，我们将结合 AlterShield 中几个关键模块，来详细介绍下我们的变更管控思路。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="什么是变更">什么是变更？<a href="#什么是变更" class="hash-link" aria-label="什么是变更？的直接链接" title="什么是变更？的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="变更的概念">变更的概念<a href="#变更的概念" class="hash-link" aria-label="变更的概念的直接链接" title="变更的概念的直接链接">​</a></h3><p>在做变更之前，我们必须先弄清楚，什么是“变更”，或者说什么是我们稳定性领域所关心的“变更”？业界通常把“Ops”当做变更，但“Ops”更多指的是研发、运维人员做的偏运维动作。在变更管控领域，“变更”这个概念要比“Ops”在范围上大很多。</p><p>所以，我们最开始对变更的定义是：<strong>任何导致线上服务状态发生变化的行为叫做变更</strong>。</p><p>然而这样的定义过于模糊。比如“状态”这个概念，如果说服务依赖和包含的持久化数据是一种显而易见的状态，那么服务当前所处的、时时流逝着的时钟是否算作“状态”？再比如数据显而易见是“状态”，那么如果用户打开支付宝发起一笔转账，这个行为是否属于“对账务系统的记账表数据状态做了变化”从而应该视作变更？</p><p>带着这个问题，我们分析了历史上由变更引发的线上环境故障案例。发现一个共性：它们都是企业内部人员通过某个平台或黑屏命令进行的线上操作。这些内部人员从运维、研发、产品到活动运营等，涵盖了多种角色。于是，变更，或者说做变更管控所需要关心的变更，指的就是“<strong>内部人员触发的任何导致线上服务状态发生变化的行为</strong>”。因此Linux时钟滴答不是变更，用户转账也不是。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="变更标准化协议ocms-open-change-management-specification">变更标准化协议（OCMS-Open Change Management Specification）<a href="#变更标准化协议ocms-open-change-management-specification" class="hash-link" aria-label="变更标准化协议（OCMS-Open Change Management Specification）的直接链接" title="变更标准化协议（OCMS-Open Change Management Specification）的直接链接">​</a></h3><p>在圈定了我们的目标范围之后，另一个要解决的问题是：单一系统发起的变更，其影响范围并不局限于这个系统本身，这对于研发、运维人员的经验性带来了极高的要求与分析成本。同时，每个企业所处的业务背景不同，甚至同一家企业不同的业务部门之间也存在着较大的差异与壁障。这个问题导致各个企业或部门所做的变更在语义、描述方式和生效方式等方面有着巨大的差异。</p><p>举个简单的例子：对于传统运维变更、业务运营配置这两类变更来说，在公司内部承载的平台可能是两个，且由不同的业务线团队来负责。那么这种差异就会导致这两类变更对于信息的定义（比如变更的内容、对象）、变更的生效模式（运维变更可能是按照服务器维度生效，业务运营配置更多是DB/内存/缓存中的数据修改）、变更的影响范围等都有所不同。那么想要对这两类变更同时在一个平台上进行管控，不统一这种信息及技术差异，成本是极高的。</p><p>针对于上述复杂场景，AlterShield 定义了OCMS（Open Change Management Specification）SDK，其中包含两部分内容：变更信息协议、变更技术协议。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="变更信息协议">变更信息协议<a href="#变更信息协议" class="hash-link" aria-label="变更信息协议的直接链接" title="变更信息协议的直接链接">​</a></h4><p>因此，AlterShield 在进行变更管控的第一步前提就是要做到不同背景下的变更信息及技术统一，其信息协议的定义可以参考下图：</p><p><img loading="lazy" src="/zh-CN/assets/images/4-c2e2f5934b59eb5a80f2022cd5005100.png" width="1039" height="632" class="img_ev3q">
这样信息协议标准化的好处是：</p><ol><li>可以兼容不同背景下的各类变更，实现了多类型变更的“统一管控”</li><li>屏蔽了上层业务场景带来的信息差异，使得变更管控后续的变更防御、变更搜索、变更审计可以基于一套标准的信息模型来进行</li><li>为其他技术风险领域相关的能力（如应急定位等）的结合提供了一套统一的信息模型，能够帮助业务在发生问题时快速定位到相关业务链路所发生过的变更</li></ol><h4 class="anchor anchorWithStickyNavbar_LWe7" id="变更技术协议">变更技术协议<a href="#变更技术协议" class="hash-link" aria-label="变更技术协议的直接链接" title="变更技术协议的直接链接">​</a></h4><p>在信息协议标准化处理之后，另一个问题就是上文例子中提到的“传统运维变更和业务运营配置变更，其变更生效模式不同”。这种流程上的不同，会导致变更在做管控时交互的机制不同。</p><p>再举个简单的例子：对于传统运维变更，通常是按照服务器分批生效的。那么对于这个变更单来说，变更管控平台可以在每个批次的前后做管控校验和信息收集；但对于DB配置类运营变更，由于DB数据仅有一份生效，所以在生产环境中的变更通常只有一个步骤，或者在上层通过UID控制分批生效。</p><p>因此，针对上述的变更流程和生效方式的不同。AlterShield 在技术协议上，通过前后置切面的形式，定义了“变更代际”的概念，从G0~G4共分为5个代际（G取自英文单词中Generation）：</p><table><thead><tr><th>代际名称</th><th>支持的变更流程和生效方式</th></tr></thead><tbody><tr><td>G0</td><td>以事件通知的协议接入 AlterShield，不提供管控能力，仅可做变更事件的通知、搜索</td></tr><tr><td>G1</td><td>对于无法按照批次拆分一步一步生效的变更，做单节点的变更流程管控</td></tr><tr><td>G2</td><td>可以按照批次拆分生效的变更（如集群服务器重启），做完整工单的变更流程管控</td></tr><tr><td>G3</td><td>在有完整的变更工单管控的基础上，增加了变更提单阶段的管控</td></tr><tr><td>G4</td><td>在变更提单管控的基础上，增加了变更无人值守的决策能力</td></tr></tbody></table><p>这种技术协议标准带来的好处是：<strong>平台业务团队与风险防控团队有了明确的职责划分边界，以及一个统一交互的标准方式，变更平台研发的团队，更聚焦于平台研发本身，而SRE团队可以关注于变更的风险防控与治理，让更专业的人做更专业的事情。</strong></p><p><img loading="lazy" src="/zh-CN/assets/images/5-43c95c8a5482d90797be99da55c362d1.png" width="967" height="927" class="img_ev3q"></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="云原生下的-ocms-集成">云原生下的 OCMS 集成<a href="#云原生下的-ocms-集成" class="hash-link" aria-label="云原生下的 OCMS 集成的直接链接" title="云原生下的 OCMS 集成的直接链接">​</a></h4><p>云原生的发展趋势下，应用系统自身的部署、运维变更，都是基于Kubernetes或其它开源CI/CD工具进行的。对于这类下沉场景，AlterShield 提供了 AlterShield Operator，连接各类CI/CD工具到OCMS SDK。同时，Operator 本身也提供了变更流速控制、异常回滚策略控制等能力。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="防控变更引发的风险">防控变更引发的风险<a href="#防控变更引发的风险" class="hash-link" aria-label="防控变更引发的风险的直接链接" title="防控变更引发的风险的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="让变更渐进式灰度生效">让变更渐进式灰度生效<a href="#让变更渐进式灰度生效" class="hash-link" aria-label="让变更渐进式灰度生效的直接链接" title="让变更渐进式灰度生效的直接链接">​</a></h3><p>金丝雀发布的思路来源是，矿井工人发现，金丝雀对瓦斯气体很敏感，矿工会在下井之前，先放一只金丝雀到井中，如果金丝雀不叫了，就代表瓦斯浓度高。 在灰度发布开始后，先启动一个新版本应用，但是并不直接将流量切过来，而是测试人员对新版本进行线上测试，启动的这个新版本应用，就是金丝雀发布模式，下图简单描述了下一个金丝雀的大致逻辑：</p><p><img loading="lazy" src="/zh-CN/assets/images/6-34bc8fa2936e3351099daec543f37ad6.png" width="883" height="758" class="img_ev3q"></p><p>矿井的做法，不再试图分析瓦斯的化学成分，从而找到这种成分的显影试剂从而判断瓦斯是否存在。而是直接通过金丝雀的表象反应(是否健康)来探测所有风险，从而解决了瓦斯以及其他可能的有毒气体的检测问题。而较之全部根因，表象的范围更小、探测手段更明确。
这样一种方式，能够在变更无法充分事前分析出风险的情况下，在真正执行期间，通过控制爆炸半径的方式，让变更可以逐步生效，能够减少未知变更风险引发的稳定性问题影响面，同时再配合上风险防御能力，能够有效的及时发现变更引发的问题，快速做拦截处置恢复动作。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="可干预变更的风险防御能力">可干预变更的风险防御能力<a href="#可干预变更的风险防御能力" class="hash-link" aria-label="可干预变更的风险防御能力的直接链接" title="可干预变更的风险防御能力的直接链接">​</a></h3><p>灰度的核心，是将变更动作拆分为可逐步生效的方式，比如代码发布可以按照机器的环境进行拆解。而一般性的变更，拆解维度不止有环境。我们试图解决变更引发的黑天鹅隐患的主要逻辑是：</p><ul><li>选择在一个<strong>风险可控</strong>的变更范围（这个范围对于稳定性的影响程度是可以接受的），将风险逐步暴露出来。</li><li>再通过变更风险识别防御能力（金丝雀们）去检测变更后是否有异常情况发生。</li></ul><p>于是可以说，以什么维度做拆解，取决于什么因素决定“风险可控”。“可控”意味着范围和风险线性关系。蚂蚁的故障最终表现在对外用户的业务流量上，流量和线性地分布在承载应用进程的机器上，同时，业务线性的分布在包括Pod、PID、UID、业务场景、机房、流量类型等在内的多种维度上。
前置转后置配合线性分批，形成了新的变更范型：</p><p><img loading="lazy" src="/zh-CN/assets/images/7-e50431f9a39153bae37892bea8097b74.png" width="1306" height="575" class="img_ev3q"></p><p>这样一个可灰度/分批的变更防控架构，把原本只能靠体验应急恢复速度来解决的问题，通过一个可控范围暴露风险，再利用充分的风险识别手段，不断将未知的变更风险问题逐步收敛。如果说之前我们期待基于历史归纳的前置规则能够回答所有可能的问题触发根因，从而在问题发生前避免之。那么此时，思路转换成了在每一个小批次之后，回答是否有问题。事实上，所有的问题根因无法穷举，使得前置校验的风险覆盖率低；同时相同根因的变更故障不常复犯，使得前置规则编写的ROI低。但变更对象及其影响面有没有问题，总是更容易回答的，且由于分批的引入，即使前面几个小批次出现了问题，由于范围可控，问题的严重性也可控。
至此，变更风险防控从面向已知问题的防控，演进到了面向未知的防控。从押宝前置校验演进到了前后置共同防控。</p><p>这套可灰度/分批的变更防控架构，有以下几个必要条件：</p><ul><li>固定流程的执行pipeline(强制风险发现/步骤可控)：<ul><li>执行按照预发/灰度/生产批次进行</li><li>环境间/批次间串联</li></ul></li><li>变更分批执行能力(控制风险范围)：<ul><li>变更的生效需要能够区分环境</li><li>线上环境按批次生效</li></ul></li><li>前后置防御校验(风险发现)：<ul><li>前置阻断变更、后置发现问题/阻断下一批次</li><li>变更每批次的前后置需要布防</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="变更防御框架defender-framework">变更防御框架（Defender Framework）<a href="#变更防御框架defender-framework" class="hash-link" aria-label="变更防御框架（Defender Framework）的直接链接" title="变更防御框架（Defender Framework）的直接链接">​</a></h3><p>基于前文的思路，在对平台业务与风险防控团队做了明确的职责划分之后，我们要做的就是为风险防控团队提供一套框架，以便为其提供更灵活、系统化的手段去检测变更过程中的异常，及时地熔断变更。</p><p>为什么需要灵活性？让我们思考一个场景：对于公司内部的管理系统来说，其做系统发布变更时通常只关注系统监控指标和核心日志就够了；但对于对客的业务系统，或者业务上的策略变更，除了关心上述指标外，还需要关注业务本身功能的健康情况（如：对客的展示页面是否白屏、业务活动预算是否充足等）。而且不同的业务变更，其关心的指标还会存在差异。</p><p>上述场景引发的问题是，即使统一了变更的信息差，对于后续的变更防御流程来说，也是不够的。因为<strong>变更防御的观测手段，是随着业务背景不同，而发生灵活变动的</strong>。这就是在之前，变更防御依赖人的经验性的原因所在。</p><p>对于变更风险防控这部分内容，AlterShield将其统称为“变更防御”。共分为：<strong>变更防御框架（Defender Framework）、变更防御能力（Defender Service）、开放扩展服务</strong>三大部分内容。</p><p><img loading="lazy" src="/zh-CN/assets/images/8-6438f49a4ef528bc519fd9b54668818e.png" width="2248" height="752" class="img_ev3q"></p><p>框架层所提供的核心能力是：</p><ol><li>防御能力路由：针对于不同变更，通过表达式配置的形式，路由到不同防御能力集合等待执行检测逻辑。以满足不同变更的防御校验多样性诉求。</li><li>防御能力的调度与并行执行：各防御能力间相互独立，各自负责自己的校验逻辑，并按照一个“统一的结构”进行结果返回。这个结构在后文中会进行阐述。</li><li>防御能力异步化：防御校验本身需要一定的时间（尤其对于可观测性相关的检测来说），这部分时间会带来变更效率的下降（因为操作变更的人员需要等待校验结论）。因此，针对分批次变更的场景下，防御框架提供了异步化校验的能力，利用变更本身执行的时间替换防御校验的时间，做风险与效率的平衡。</li></ol><p><img loading="lazy" src="/zh-CN/assets/images/9-c70a18e7988e00f26ecced49c8abc9d1.png" width="819" height="443" class="img_ev3q">
<img loading="lazy" src="/zh-CN/assets/images/20-b817dded8cd1d8610d0df6aae97ac1cf.png" width="1003" height="686" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="变更防御能力defender-service">变更防御能力（Defender Service）<a href="#变更防御能力defender-service" class="hash-link" aria-label="变更防御能力（Defender Service）的直接链接" title="变更防御能力（Defender Service）的直接链接">​</a></h3><p>如前文所述，对于大部分变更来说，虽然部分使用的防御能力会存在差异（业务语义较强的部分），但大体上所需的防御能力仍是大同小异的（如：可观测性检测、配置变更的值校验、变更操作规范校验等）。这部分我们统称为“通用防御能力”，AlterShield 已在自身框架内部默认集成。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="时序指标异常检测----分批变更监控">时序指标异常检测 -- 分批变更监控<a href="#时序指标异常检测----分批变更监控" class="hash-link" aria-label="时序指标异常检测 -- 分批变更监控的直接链接" title="时序指标异常检测 -- 分批变更监控的直接链接">​</a></h4><p>对于可观测性领域，OpenTelemetry 给出了清晰的三个子领域定义（Metric、Logging、Tracing），其中“Metric”指的就是监控中时序指标（如：CPU利用率、系统RPC服务调用成功率等）。AlterShield 针对时序异常检测，贴合变更分批次执行的背景，建设了“分批变更监控”。</p><p><img loading="lazy" src="/zh-CN/assets/images/10-a8ce24a6d3ec98b8a414a331085afa65.png" width="646" height="320" class="img_ev3q"></p><p>如上如示意，变更场景和普通场景在时序异常检测的区别是，变更场景是有明显的两个时间点的：<strong>变更开始、变更结束。因此，我们在获取到监控时序数据后，主要是做变更前后两段时序的对比异常检测</strong>。</p><h5 class="anchor anchorWithStickyNavbar_LWe7" id="短时序异常检测">短时序异常检测<a href="#短时序异常检测" class="hash-link" aria-label="短时序异常检测的直接链接" title="短时序异常检测的直接链接">​</a></h5><p>在时序异常检测部分，我们使用了KDE模型进行（Kernel Density Estimation，核密度函数估计）。KDE是统计概率模型之一，统计概率模型是也是比较常见的异常检测思路。数据往往具有其分布规律，如果落在分布边界则触发了小概率事件，即为可能产生了异常。在正态中，99.73% 的数据分布在距平均值三个标准差以内（3-sigma）。那么，如果我们的数据服从一定分布，就可以从分布曲线推断出现当前值的概率。</p><p><img loading="lazy" src="/zh-CN/assets/images/11-2f64fb4b76ac6d696aae699192e4c784.png" width="732" height="531" class="img_ev3q"></p><p>反映到变更场景中，变更前和变更后的时序数据服从一定分布（例如正态分布），那么变更后的当前时间点数据如果超过 N-sigma，则可以判断为异常，一个简要的检测可以描述为：</p><p><img loading="lazy" src="/zh-CN/assets/images/12-79062584fd2cdee87a2a271328c1d19e.png" width="960" height="258" class="img_ev3q"></p><p>三个标准差 3-sigma 是常用的标准，但它的问题是，真实的变更时序数据大部分无法假设其真实分布，即使是一个小时间窗口里的数据分布也很复杂，它不是一个简单的正态分布。相比而言，KDE 是一种非参数估计方法，对数据分布不附加任何假定，只是从数据样本本身出发研究数据分布特征。基于 KDE 的变更时序异常发现，主要流程同 N-sigma，主要是 step2 不同，它需要重新构建变更前样本的数据分布: X1、X2、... Xn 为独立同分布的 n 个样本点，设其概率密度函数为 f，则核密度估计公式为：</p><p><img loading="lazy" src="/zh-CN/assets/images/13-aed970ab4c2fa9694b7c00a0a19dee88.png" width="1000" height="228" class="img_ev3q"></p><p>其中 h 为一个非负的平滑参数，称作带宽， K(.)为核函数(非负、积分为 1，符合概率密度性质，并且均值为 0 )。</p><p>核函数有很多种，例如：uniform、triangular 、biweight、triweight、Epanechnikov、normal 等。依据变更前数据求得概率密度函数 f 后，即可求变更后任意点的概率，进行异常判断。</p><p>另外，仅做变更前后的时序异常比对，极其容易出现由于各类突发、预期内事件导致的指标异动误判。我们回滚并分析了各类误报案例，总结并建设了基于对照组、背景组、历史组的准召率提升方案：</p><ul><li>对照组：同逻辑单元下未变更的服务器采集的指标数据</li><li>背景组：该批次服务器历史n天内的时序指标数据</li><li>历史组：该应用上次同类型变更前后的时序指标数据</li></ul><p><img loading="lazy" src="/zh-CN/assets/images/14-d3baceac058ca7b8e524cb0640e6b8ee.png" width="865" height="750" class="img_ev3q"></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="日志异常检测----新增突增异常检测">日志异常检测 -- 新增、突增异常检测<a href="#日志异常检测----新增突增异常检测" class="hash-link" aria-label="日志异常检测 -- 新增、突增异常检测的直接链接" title="日志异常检测 -- 新增、突增异常检测的直接链接">​</a></h4><p>一个系统运行的情况，除了在监控时序指标上可以反映外，另外需要关注的就是其错误日志中，是否有异常堆栈信息，如下图：</p><p><img loading="lazy" src="/zh-CN/assets/images/15-6c6f0ad687d0aa0d783f7b5ff86d63e3.png" width="1413" height="188" class="img_ev3q"></p><p>AlterShield 针对此类日志异常识别场景建设了“新增、突增异常检测”防御能力，检测变更后错误日志中的异常变化情况，共分为两个阶段：</p><ol><li>训练阶段：将通用错误日志中的异常信息进行正则化处理，并将处理后的日志正则模板按照相似度进行分类，构造该系统的日志模板库。</li><li>预测阶段：将系统实时采集异常日志信息同样进行正则化处理，并与模板库中全量模板进行相似度拟合，得出该异常是否为新增异常的结论；针对突增异常，需要计算异常模板计数，预测思路和上文时序异常检测思路相似。</li></ol><p><img loading="lazy" src="/zh-CN/assets/images/16-7a6c7e11a0bd1ebb6c6f08365fec204c.png" width="906" height="600" class="img_ev3q"></p><h5 class="anchor anchorWithStickyNavbar_LWe7" id="异常相似度计算">异常相似度计算<a href="#异常相似度计算" class="hash-link" aria-label="异常相似度计算的直接链接" title="异常相似度计算的直接链接">​</a></h5><p>在相似度计算上，AlterShield 使用了 Drain 算法，其核心思想是根据各个模板构造固定深度的解析树。当新的异常模板进来时，会与每个已有分支进行相似度计算，不相似则新增分支。</p><p><img loading="lazy" src="/zh-CN/assets/images/17-27d983a921216baff33912d8e75fd1be.png" width="908" height="684" class="img_ev3q"></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="链路异常检测----链路错误码检测">链路异常检测 -- 链路错误码检测<a href="#链路异常检测----链路错误码检测" class="hash-link" aria-label="链路异常检测 -- 链路错误码检测的直接链接" title="链路异常检测 -- 链路错误码检测的直接链接">​</a></h4><p>对于单一系统的变更，其影响很可能并不局限于这个系统本身，更可能波及到其上/下游，或整个业务链路的入口/末尾。那么就需要变更后能够具备对整条业务链路进行异常检测的能力。</p><p><img loading="lazy" src="/zh-CN/assets/images/18-206f7233700210b1933080f54eb2edfa.png" width="770" height="522" class="img_ev3q"></p><p>简单模式下，通过trace日志聚合即可反映出系统间每笔流量的调用异常情况以及业务错误码的变化情况，但这种方式的问题在于计算量过于庞大，极度损耗资源。</p><p>那么较为复杂的方式是结合中间件能力，将每笔流量的调用携带特殊标记进行透传染色，这样既能明确感知一笔流量所经过的系统链路，又能在透传的同时携带系统交互的关键信息，从而实现整条链路的异常检测。</p><p>AlterShield 正是借助 Sofa RPC 中间件的能力，将变更信息协议中的唯一标识位在整条流量链路上进行透传。再在链路的入口和末尾处打印全部流量中的业务错误码统计信息。这样，就将链路异常识别问题转换为基于日志的监控指标时序比对问题。后续异常检测的思路大致和“分批变更监控”相同。</p><p>在此你可能有些疑问：如果变更的系统，RPC服务异常导致上/下游根本接收不到消息，就不会在链路的入口和末尾打印统计日志了。那么这类异常怎么识别呢？</p><p>其实，对于RPC服务的来说，各类主流框架都是支持打印统计日志的。一旦出现失败量突升，在统计日志中即可反映出来。所以，这个问题是属于“单系统的监控时序指标校验”范畴，也就是说利用前文提到的“分批变更监控”就可校验出来。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="配置值自适应校验">配置值自适应校验<a href="#配置值自适应校验" class="hash-link" aria-label="配置值自适应校验的直接链接" title="配置值自适应校验的直接链接">​</a></h4><p>对于配置类型的变更（如：分布式内存配置变更、营销活动配置变更等），一旦提单人员疏忽填写错误或遗漏，也会导致线上问题。同时，这类配置可能数量极其庞大（在蚂蚁集团内部有上千万+），靠人工进行梳理是不现实的。</p><p>因此，对于历史上正常完结没有回滚的配置变更，AlterShield 根据其变更值进行特征提取，学习该配置的key、value变化规律，从统计学、正则、枚举等多个角度构造每个配置值的特征组。当新变更到来时，就转化成了特征相似匹配，从而发现人工填写错误的问题。</p><p><img loading="lazy" src="/zh-CN/assets/images/19-2baaaeada2c940ea89e188826b5ab5db.png" width="938" height="422" class="img_ev3q"></p><p>另外，除 AlterShield 提供的上述防御能力外，风险防控人员也可将自己在特定业务背景下的专家经验，以Plugin、SPI扩展的形式沉淀到 AlterShield 中，并以配置化的形式进行路由设置，生效到指定变更中。</p><h1>社区建设</h1><p>变更管控领域是提升生产环境稳定性的一个重要领域。相关的技术标准也在逐步完善建设起来，并推动这一领域的演进。在这样的背景下，我们也希望将 AlterShield 在蚂蚁5年的实践经验开放出来，与各行业的领域专家一起探讨学习，并逐渐丰富 AlterShield 自身能力与社区建设。</p><p>我们的开源工作在陆续准备中，当前还只是我们的0.1版本。首期我们会开源 AlterShield 的 OCMS + Operator体系。接下来我们的计划如下：</p><ol><li>提供完善的开箱即用及Q&amp;A手册</li><li>完善 Operator 能力：提供完整的变更策略控制、回滚策略控制能力。</li><li>扩展 Operator 生态：集成更多的开源CI/CD工具当中，丰富感知及防控场景。</li><li>原生防御能力下沉：在 Operator 中直接提供对接监控工具服务及异常校验能力。</li><li>完善可观测性异常检测生态：集成更多的开源监控工具，提供异常检测能力。</li><li>开源完整的Defender模块：包含防御框架、防御能力及开放扩展部分。</li><li>开源完整的Analyser模块：包含分析框架、影响面分析、风险分析、可观测性分析及变更分级部分。</li><li>开放独立的防御校验能力：使防御框架独立于OCMS SDK，无需接入改造，即可进行变更防控校验。</li></ol><p>作为开源社区，我们欢迎各种形式的贡献，您可以参与到社区的共建的形式包括但不限于：</p><ul><li>错别字修正：帮助我们指正文档中的错误。</li><li>问题及案例探讨：您公司中的变更故障案例，脱敏后可参与讨论，一期探讨解决方案。</li><li>Bug提交：帮助我们指出 AlterShield 中逻辑错误的地方。</li><li>新功能场景探讨：任何 AlterShield 还不具备的变更领域功能，都可以一起讨论。</li><li>完善 OCMS 协议：目前 OCMS 开源还处于0.1版本，如果在您的场景下有不能适配的情况，您可以直接参与讨论及扩充。</li><li>完善 Operator 生态：目前 Operator 在0.1版本会对接Kubernetes Deployment，您可以在您的CI/CD工具下改造及对接 Operator，扩展其生态。</li><li>对接更多监控工具：您可以将您所使用的监控工具对接到 AlterShield 提供的可观测性防御能力中，扩展 AlterShield 的检测能力范围。</li><li>沉淀您的变更防御专家经验：您可以以Plugin、SPI扩展的形式，将您的变更防御专家经验沉淀到 AlterShield 中。</li></ul><p>后续，所有的研发、讨论等相关工都会在社区透明运行。您可以通过以下方式联系到我们：</p><ul><li><p>微信交流群二维码：
<img loading="lazy" src="/zh-CN/assets/images/wechat-group-7a636adb48d066799de437e3a04d3077.png" width="986" height="1280" class="img_ev3q"></p></li><li><p>钉钉交流群二维码：
<img loading="lazy" src="/zh-CN/assets/images/dingtalk-group-c88f9406258a00a089171fd9d2cc25ce.png" width="1170" height="1530" class="img_ev3q"></p></li></ul>]]></content>
        <author>
            <name>Yalong Jin</name>
            <uri>https://github.com/jinyalong</uri>
        </author>
        <author>
            <name>Yuefan Wang</name>
            <uri>https://github.com/yvan-wyf</uri>
        </author>
        <author>
            <name>Haouan Yu</name>
            <uri>https://github.com/yhaoxuan</uri>
        </author>
        <category label="SRE" term="SRE"/>
        <category label="DevOps" term="DevOps"/>
        <category label="OCMS" term="OCMS"/>
        <category label="AlterShield" term="AlterShield"/>
        <category label="Kubernetes" term="Kubernetes"/>
        <category label="AIOps" term="AIOps"/>
    </entry>
</feed>